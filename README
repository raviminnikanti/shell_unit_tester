This README explains how to write test cases and test shell script libraries using shell_unit_tester

Also, see test directory for an example on how to use shell_unit_tester.

Writing test cases using shell_unit_tester:
1. A variable called TOTAL_TESTS should contain the total count of test cases.
2. A test case is a name formatted variable which contain a string with all the details about the shell function that is under test.
3. A test case variable is formatted as TEST_CASE${number}. where ${number} is the test case number
4. All the test case variable names are numbered sequencially. 
5. For example, variable name of test case 1 is TEST_CASE1.
6. Value of a each test case contains blank separated arguements.

A test case explained with an example:
1. A example test case: TEST_CASE1="function1  2  arg_1 arg_2  0 1"
2. Here function1 is the name of the function that is under test. 
3. It takes 2 arguments arg_1, arg_2 these will be passed to function1 while testing it.
3. 0 is the expected return code of this function.
4. 1 says that this function needs a return value validation. See below to understand how to do return value validation.


Shell function return value validation:
1. To validate the return value of function that is under test, one should define a specific name formatted shell function 
2. This function should return the expected value of the test case.
3. shell_unit_tester invokes this function during test run.
4. Here is an example function for TEST_CASE1
   expected_return_value_test1() {
   	echo -n "test_value"
   }
5. If shell function defined as TEST_CASE1 also returns return value "test_value", test succeeds. Otherwise fails.


preparing a test case (optional):
1. Some functions might need a set up before testing.
2. A specific name formatted function can be defined in which required set up can be done.
3. shell_unit_tester invokes this preparation function before executing that particular test case.
4. Here is a name formatted preparation function for test case 1
   prepare_test_case1() {
   	echo "Setup for TEST_CASE1"
   }

Post test de-setup or validation(optional):
1. Some shell functions may need some validation after the test case execution to verify that function has done its task successfully.
2. A specific name formatted function can be defined which can do this.
3. shell_unit_tester invokes this post test case function after executing the test case.
4. If no function is defined, shell_unit_tester will just ignore.
5. Here is a name formatted post test case function for test case 1
   post_test_case1() {
	echo "Here, revert any set up done during preparation"
	# return code validation is performed by shell_unit_tester.
	# test case will be failed, on a non-zero return code.
	return 0
   }
